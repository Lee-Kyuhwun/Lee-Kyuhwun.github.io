---
layout: post
title: "Vue를 활용한 동적 웹 애플리케이션 개발"
date: 2024-01-06 17:03:36 +0000
categories: Vue
---

Vue에서 method와 computed의 차이

Vue에서 `methods`와 `computed`는 데이터를 처리하고 템플릿에 데이터를 표시하는 방법을 제공하지만, 그 목적과 사용 방법이 다릅니다.

# method

`method`는 함수의 모음으로, 사용자 입력과 같은 이벤트에 응답하거나, 데이터를 조작하고, 조건부 로직을 실행하는 데 사용됩니다. `methods`내의 함수는 템플릿에서 직접 호출할 수 있으며, `매번 호출될 때마다 함수를 실행합니다.`

**사용 사례:**

- 사용자 이벤트 핸들링 (예: 버튼 클릭)
- 매 호출마다 다른 결과를 반환해야 하는 경우 (예: 현재 시간 반환)
- 간단한 조작이 필요할 때

# `computed`:

`computed`는 계산된 속성을 정의하며, 종속된 데이터에 기반하여 자동으로 업데이트됩니다. 종속 데이터가 변경될 때만 함수를 다시 실행하고, 그렇지 않은 경우 이전에 계산된 값을 재사용하여 성능을 향상시킵니다.

**사용 사례:**

- 종속 데이터를 기반으로 한 복잡한 계산
- 동일한 계산 결과를 여러 곳에서 재사용
- 데이터 변화에 따른 자동 업데이트가 필요할 때

### 공통점과 차이점:

**공통점:**

- 둘 다 Vue 인스턴스 내에서 정의되며, 템플릿에서 직접 사용될 수 있습니다.
- 데이터를 처리하고 결과를 반환하는 데 사용됩니다.

**차이점:**

- **캐싱:** `computed`는 종속 데이터가 변경될 때만 재계산되며 결과를 캐시합니다. 반면, `methods`는 호출될 때마다 계산을 수행합니다.
- **사용 목적:** `methods`는 주로 이벤트 핸들링과 데이터 조작에 사용되며, `computed`는 종속된 데이터에 의존하는 계산된 값을 정의하는 데 사용됩니다.

### 언제 어떤 함수를 사용해야 하나요?

- **`methods` 사용:**

  - 사용자 인터랙션에 응답해야 할 때 (예: 클릭 이벤트).
  - 매 호출마다 다른 결과가 필요할 때 (예: 랜덤 숫자 생성).
  - 계산 결과를 캐시할 필요가 없을 때.

- **`computed` 사용:**
  - 데이터 변화에 따라 자동으로 업데이트되어야 하는 값이 필요할 때.
  - 복잡한 로직을 통해 계산된 값이 필요하고, 이 값을 여러 곳에서 재사용할 때.
  - 성능 최적화가 중요할 때 (동일한 계산을 여러 번 수행하지 않도록 캐싱이 필요할 때).

결론적으로, `methods`와 `computed`는 서로 다른 경우에 적합하므로, 상황과 필요에 따라 적절한 옵션을 선택하는 것이 중요합니다. 데이터 변화에 반응하는 계산된 값이 필요하다면 `computed`를, 이벤트 처리나 매번 다시 계산해야 하는 로직이 필요하다면 `methods`를 사용하는 것이 좋습니다.
